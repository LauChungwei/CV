##1.图像遍历
  1.1 at（）函数
  Mat src = Mat(100,100,CV_8UC3);
  for (int i=0;i<src.rows;i++)
    for (int j=0;j<src.cols;j++){
      Vec3b pixel;
      pixel[0]=128;
       pixel[1]=128;
        pixel[2]=128;
      src.at<Vec3b>(i,j)=pixel;
      }
      
   1.2 迭代器 iretator
    MatIterator_<Vec3b> colorit, colorend;
    for(colorit = colorImage.begin<Vec3b>(), colorend = colorImage.end<Vec3b>(); colorit != colorend; ++colorit)
    {
        (*colorit)[0] = rand() % 255;       //Blue,注意这里取地址符号需要添加括号限制
        (*colorit)[1] = rand() % 255;       //Green
        (*colorit)[2] = rand() % 255;       //Red
    }
    
    1.3 指针
     for(int i = 0; i < colorImage.rows; ++i)
    {
        Vec3b* p = colorImage.ptr<Vec3b>(i);//获取每一行的首地址
        for(int j = 0; j < colorImage.cols; ++j)
        {
            p[j][0] = i % 255;      //Blue
            p[j][1] = j % 255;      //Gree
            p[j][2] = 0;            //Red
        }
    }

##2 图像的卷积计算
  2.1 二维卷积和表达式；
  2.2 常见的二维卷积计算算子（robert：右上/左上，sobel：X/Y，使用无穷范数作为最终的梯度结果，laplace：边缘，锐化）搭配filter2D使用
      自定义kernel：
            Mat kernel=(Mat_<int>(3,3)<<1,2,3,1,2,3,1,2,3);
      卷积运算的边缘处理，copyMakeBorder（）；当然也可以根据kernel的大小自行选择对增加的边缘的像素值的处理。
   2.3 常见的滤波方法
      均值滤波是最基础的滤波方式
      高斯滤波增加了中心位置像素的权重，将空间位置因素纳入考虑；
      中值滤波排除了最大最小项，将像素值的异常情况纳入考虑；
      双边滤波兼顾了空间与像素值的因素，保留边缘特征（高差部分不进行模糊）的基础上进行了模糊。
      
//直方图均衡化
  直方图均衡化的作用是及图像增强。
  把原始图像的直方图变换为均匀分布的形式，从而增加了像素灰度值的动态范围，达到增强图像整体对比度的效果。这里的“均匀分布”是指各个灰度级中像素的数量均匀。
  横坐标表示灰度值，纵坐标表示当前灰度值对应的元素的数量，按照规则将横坐标重映射，映射的规则是：原像素点在所有像素点的数量位置等于该像素在新坐标下的灰度位置。
  
  简单记为：依据纵坐标（像素数量）对横坐标（灰度值）进行重映射。













































